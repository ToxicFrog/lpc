#!/usr/bin/env luajit

--[[
ttysnap - take snapshots from ttyrec files
depends: xterm & imagemagick
usage: ttysnap <path to ttyrec file> <prefix to append to snapshots>

When run, it creates an xterm displaying the ttyrec output and gives you a
command line to control it from. Enter 'h' or '?' for a list of commands.
]]

BASEDIR = arg[0]:gsub("[^/]+$", '')
if not BASEDIR:match('^/') then
  BASEDIR = './' .. BASEDIR
end
package.path = package.path
  ..";"..BASEDIR.."/lib/?.lua"
  ..";"..BASEDIR.."/lib/?/init.lua"

require "util.string"
require "util.io"
require "util.flags"

local TTY = require "ttysnap"

flags.register ("palette") {
  help = "Provide a custom palette, e.g. --palette 4=orange,12=yellow";
  type = flags.mapOf(flags.number, flags.string);
  default = {};
}

flags.register ("term-size") {
  help = "Terminal size, widthxheight";
  type = flags.string;
  default = "80x24";
}

flags.register ("font") {
  help = "XTerm font";
  type = flags.string;
  default = "Cousine";
}

flags.register ("font-size") {
  help = "XTerm font size";
  type = flags.number;
  default = 16;
}

flags.register ("prefix") {
  help = "Prefix for saved snapshots; $P expands to ttyrec path, $N to ttyrec basename";
  type = flags.string;
  default = "$P.";
}

flags.register ("timestamps") {
  help = "Use HH:mm:ss.ms as the default name for snapshots rather than frame number.";
}

flags.register ("help", "h") {
  help = "This text";
}

local function strtime(t)
  return string.format(
    "%02d:%02d:%06.3f",
    math.floor(t/60/60), -- hours
    math.floor(t/60) % 60, -- minutes
    t % 60) -- seconds
end

-- frame is either an absolute frame number, or +n or -n to seek that many
-- frames ahead/behind.
local function seek(tty, frame)
  if not tonumber(frame) then
    print("Invalid frame number: "..frame)
    return
  end

  if frame:match("^[-+]") then
    tty:seek(tonumber(frame) + tty.frame)
  else
    tty:seek(tonumber(frame))
  end
end

-- time is either an absolute timestamp as hh:mm:ss.ms, or prefix with +/- as f
local function seektime(tty, t)
  local dir
  if t:match('^[-+]') then
    dir,t = t:match('^([-+])(.*)')
    dir = tonumber(dir.."1") -- turn it into +1 or -1
  end

  local h,m,s = t:split(':')
  if not m then -- only seconds specified
    h,m,s = 0,0,h
  elseif not s then -- only minutes and seconds specified
    h,m,s = 0,h,m
  end

  if not (tonumber(h) and tonumber(m) and tonumber(s)) then
    print("Invalid time: "..t)
    return
  end

  t = 60*60*tonumber(h) + 60*tonumber(m) + tonumber(s)
  if dir then
    tty:seektime(tty.time + t * dir)
  else
    tty:seektime(t)
  end
end

-- take a snapshot. If name is unspecified, name it with the current time.
local function snap(tty, name)
  local prefix = flags.parsed.prefix
    :gsub("$P", (flags.parsed[1]:gsub("%.[^%.]+$", "")))
    :gsub("$N", (flags.parsed[1]:match("[^/]+$"):gsub("%.[^%.]+$", "")))
  if flags.parsed.timestamps then
    name = tty:snap(prefix .. (name or strtime(tty.time)) .. ".png")
  else
    name = tty:snap(prefix .. (name or "%08d" % tty.frame) .. ".png")
  end
  if name then
    print("Snapshot saved to %s" % name)
  else
    print("Error saving snapshot.")
  end
end

local function help(tty)
  print [[
f <number>      seek to frame; use +n or -n to seek forward/back that many
<number>        ditto
t hh:mm:ss.ms   seek to timestamp; +/- work as above; hh/mm/ms optional
s               take a screenshot, name based on frame number
s <label>       take a screenshot, name based on label
,               as t +00:01
.               as t +00:10
/               as t +01:00
<enter>         repeat last command
q               quit
]]
end

local commands = {
  h = help;
  help = help;
  f = seek;
  t = seektime;
  s = snap;
  [","] = function(tty) seektime(tty, "+00:01") end;
  ["."] = function(tty) seektime(tty, "+00:10") end;
  ["/"] = function(tty) seektime(tty, "+01:00") end;
  q = function(tty) tty:close(); os.exit(0); end;
}

local function main(ttyrec, prefix)
  if flags.parsed.help then
    flags.help()
    return 0
  end

  PREFIX = prefix or ""
  local tty = TTY:init(ttyrec, flags.parsed)

  local lastcmd,lastargs = nil,nil
  while true do
    printf("%s %6d] ", strtime(tty.time), tty.frame)
    io.flush()
    local cmd,args = io.read():split(nil, 1)
    if cmd == "" then
      cmd,args = lastcmd,lastargs
    end
    if tonumber(cmd) then
      cmd,args = "f",cmd
    end

    if commands[cmd] then
      lastcmd,lastargs = cmd,args
      commands[cmd](tty, args)
    else
      printf("Error: unknown command: '%s'\n", cmd)
    end
  end
end

return main(unpack(flags.parse(...)))
