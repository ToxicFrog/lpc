#!/bin/bash
# :mode=bash:

function placeholder {
# extract dialog text from bottom
convert -crop 480x102+4+278 -threshold 90% -negate 604-capture_604_19_132205-crop.png test.png
# extract nameplate
convert -crop 88x20+4+254 -threshold 90% -negate  604-capture_604_19_132205-crop.png test.png
# top dialog
convert -crop 490x102+4+4 -threshold 90% -negate 176-capture_176_19_125554-crop.png test.png
# top nameplate
convert -crop 88x20+4+110 -threshold 90% -negate 176-capture_176_19_125554-crop.png test.png
}

# set -e
shopt -s lastpipe

# position of detection slice; position of nameplate; position of main text
POSITIONS='
6x24+0+108 88x20+4+110 460x102+16+4
6x24+0+252 88x20+4+254 460x102+16+278
'

function detect {
  echo "$POSITIONS" | egrep . | while read rect pos; do
    diff="$(
      compare \
        <(convert -crop $rect -threshold 50% "$1" bmp:-) \
        NAMEPLATE_PATTERN2.png \
        -metric AE bmp:/dev/null 2>&1)"
    if ((diff <= 4)); then
      echo "$pos"
      return
    fi
  done
}

# ocr <database name> <image> <coordinates>
function ocr {
  gocr -p $1.ocr/ -m $((256+128+2)) -d 0 -a 100 -f ASCII \
    -i <(convert -crop $3 -intensity Brightness -threshold 90% -negate $2 pnm:-) \
    -o /tmp/$$ 2>&1 | sed -E '/^#/ d; y/,O#./░▒█ /; s/([a-z])  /\1. /g;' >&2
  cat /tmp/$$ \
  | tr '\n' ' ' \
  | sed -E "
    s/([a-z]),([a-z])/\\1'\\2/g
    s/\\. \\. \\. /.../g
    s/^ +//; s/ +$//
    s/\\?\\?/\\?/g
  "
}

mkdir -p nameplate.ocr text.ocr
echo > out.txt
for img in "$@"; do
  detect "$img" | read nameplate text
  if [[ $nameplate ]]; then
    echo "# $img" >> out.txt
    echo "[$(ocr nameplate $img $nameplate)] $(ocr text $img $text)" >> out.txt
    echo >> out.txt
  fi
done
cat out.txt
exit 0

# to detect nameplate
# threshold 145
# cut out 6x24+0+108 for top, +0+252 for bottom
# diff against NAMEPLATE_PATTERN

function imagegrep() {
    local basis="$1"
    local orig="$2"
    # compose darken basically treats the basis as the alpha channel for the orig,
    # so all that's left is the border around the portrait
    # compare AE is Absolute Error Count, i.e. number of different pixels

    composite -compose darken "$orig" <(convert -level 0,1 "$basis" bmp:-) bmp:- \
        | compare bmp:- "$basis" -metric AE bmp:/dev/null 2>&1 \
        | egrep -q '^0$' && return 0
    return 1
}

function hasface() {
    imagegrep "faces/basis_$1.png" "$2" && return 0 || return 1
}

function ocr() {
    gocr -d 0 -a 99 -f ASCII -m $((256+128+2)) -p ocr/ \
        -i <(convert -crop 640x96+0+384 -negate -level 60%,61% $ss pnm:-) \
        | lua -e 'buf = io.read "*a"; print(( buf:gsub("\n", " ") ))' \
        | tee -a latest/dialogue.txt
}
